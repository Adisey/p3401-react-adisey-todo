? - Не понял что проверяет тест
! - Работает, не понимаю, почему не прошёл тест
* - Работает но по другому алгоритму


  Компонент Scheduler:
    должен иметь базовую разметку JSX:
      × должен соответствовать снепшоту разметки (237ms)
    должен иметь базовое изначальное состояние:
      newTaskMessage — строковое свойство, описывающее текст новой задачи задачи
        √ должно существовать (1ms)
        √ должно иметь пустую строку в качестве изначального значения (1ms)
      tasksFilter — строковое свойство, описывающее текстовое значение фильтра задач
        √ должно существовать
        √ должно иметь пустую строку в качестве изначального значения
      isTasksFetching — булевое свойство, описывающее состояние спиннера
        √ должно существовать (1ms)
!       × должно иметь false в качестве изначального значения (1ms)
      tasks — массив, содержащий объекты с задачами
        √ должно существовать
!       × должно иметь пустой массив в качестве изначального значения (1ms)
    должен содержать базовые методы класса, реализированные через методы стрелки (свойства класса)
      _updateTasksFilter
!       × должен менять свойство состояния state.tasksFilter текстовым контентом, будучи вызванным в качестве обработчика события onChange (1ms)
?       × должен работать в case-insensitive режиме (1ms)
      _updateNewTaskMessage
!       × должен менять свойство state.newTaskMessage текстовым контентом, будучи вызванным в качестве обработчика события onChange (1ms)
      _getAllCompleted
*       × должен вернуть true, если все задачи в свойстве state.tasks — выполнены (completed) (13ms)
*       × должен вернуть false, если хотя-бы одна задача в свойстве state.tasks — не выполнена (!completed)
      _setTasksFetchingState
?       × должен менять состояние свойства state.isTasksFetching в зависимости от переданного первого аргумента булевого типа (1ms)
      _fetchTasksAsync
        √ должен быть асинхронным (10ms)
        √ должен вызывать метод this._setTasksFetchingState для включения спиннера (2ms)
!       × должен выполнить обращение к методу api.fetchTasks из модуля REST (1ms)
!       × должен обновить состояние объектами задач, полученными с API (1ms)
        √ в конце запроса должен вызывать метод this._setTasksFetchingState для выключения спиннера
      _createTaskAsync
*       × должен быть асинхронным, и должен возвращать null, не обращаясь к api.createTask, будучи вызванным когда state.newTaskMessage — пустая строка (4ms)
*       × должен вызывать метод preventDefault синтетического события будучи вызванным в качестве обработчика события onSubmit, когда state.newTaksMessage — не пустая строка (1ms)
        √ должен вызывать метод this._setTasksFetchingState для включения спиннера
*       × должен выполнить обращение к методу api.createTask из модуля REST, передав тому текст задачи из свойства state.newTaskMessage, для отправки на сервер (1ms)
*       × должен обновить состояние объектом новосозданной задач, полученной с API, а значение свойства newTaskMessage должно стать пустой строкой
!       × в конце запроса должен вызывать метод this._setTasksFetchingState для выключения спиннера (1ms)
      _updateTaskAsync
        √ должен быть асинхронным (1ms)
        √ должен вызывать метод this._setTasksFetchingState для включения спиннера
?*      × должен обратится к методу api.updateTask из модуля REST, передав ему аргументом объект задачи, полученной из первого параметра самого _updateTaskAsync (1ms)
        √ в конце запроса должен вызывать метод this._setTasksFetchingState для выключения спиннера
      _removeTaskAsync
        √ должен быть асинхронным (6ms)
        √ должен вызывать метод this._setTasksFetchingState для включения спиннера (1ms)
!       × должен выполнить обращение к методу api.removeTask из модуля REST, передав ему аргументом при вызове идентификатор задачи для удаления
!       × должен удалить из локального состояния задачу, если задача успешно была удалена на сервере (1ms)
        √ в конце запроса должен вызывать метод this._setTasksFetchingState для выключения спиннера
      _completeAllTasksAsync
*       × должен быть асинхронным (10ms)
*       × не должен выполнять обращение к api.completeAllTasks и должен вернуть null, если все задачи в state.tasks — выполнены (7ms)
*       √ должен вызвать this._setTasksFetchingState для включения спиннера, если в состоянии есть хотя-бы одна не выполненная задача (4ms)
*       × а также — должен обратится к api.completeAllTasks, передав в качестве аргумента массив с не выполненными задачи из состояния (1ms)
*       × должен перевести все задачи в локальном состоянии компонента в выполненные (1ms)
*       √ должен вызывать метод this._setTasksFetchingState для включения спиннера
    должен имплементировать бизнес-логику
      создания новой задачи:
        √ в качестве изначального состояния текст новой задачи должен быть пустой строкой
        √ в качестве изначального значения элемента <input /> внутри элемента <form /> должна быть пустая строка. (7ms)
!       × значение элемента <input /> внутри элемента form должно контролироваться свойством state.newTaskMessage (3ms)
        √ максимальная длина строки элемента <input /> не должна превышать 50 символов (1ms)
        √ максимальная длина строки элемента <input /> не должна превышать 50 символов (2ms)
!       × при введение текста в элемент <input /> внутри <form /> должен сработать метод this._updateNewTaskMessage (5ms)
!       × при сабмите формы должен вызваться метод this._createTaskAsync (3ms)
?       × должен быть вызван метод syntheticEvent.preventDefault (1ms)
!       × если значение state.newTaskMessage — не пустая строка, то должен произойти вызов api.createTask из модуля REST с аргументом в виде state.newTaskMessage
        √ значение state.newTaskMessage должно стать пустой строкой (1ms)
      фильтрации задачи:
        √ в качестве изначального состояния текст фильтрации задач должен быть пустой строкой
        √ в качестве изначального значения элемента <input type="search" /> должна быть пустая строка (4ms)
!       × значение элемента <input type="search" /> должно контролироваться свойством state.tasksFilter (2ms)
!       × ввод текста в <input type="search" /> должен привести к вызову обработчика this._updateTasksFilter (2ms)
      выполнения всех задачи одной кнопкой:
*       × при клике на <Checkbox /> с текстом «Все задачи выполнены» в <footer /> — должен быть вызван обработчик this._completeAllTasksAsync (17ms)
